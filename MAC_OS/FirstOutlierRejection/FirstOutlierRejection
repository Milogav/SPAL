#!/Applications/Slicer.app/Contents/bin/python-real
# -*- coding: utf-8 -*-

import sys
import os
import subprocess
import nibabel as nib
import numpy as np
import time
import shutil

###########################FUNCTION DEFINITIONS###########################
  
def load_nii(imgPath):
    imgNii = nib.load(imgPath)
    array = imgNii.get_data()
    return imgNii,array

def save_nii(array,nii_data,out_path):
    if not '.gz' in out_path:
        out_path += '.gz'
    img = nib.Nifti1Image(array, nii_data.affine, nii_data.header)
    nib.save(img,out_path)
                
#####################################################################################
                
if __name__ == '__main__':
    boldPath = sys.argv[1]
    uterusMaskPath = sys.argv[2]
    brainMaskPath = sys.argv[3]
    brainRange = sys.argv[4]
    liverMaskPath = sys.argv[5]
    liverRange = sys.argv[6]
    placentaMaskPath = sys.argv[7]
    placentaRange = sys.argv[8]
    oddJacPath = sys.argv[9]
    evenJacPath = sys.argv[10]

    outPath=sys.argv[11]
    outOutlierDirName = sys.argv[12]
    outRefVolName = sys.argv[13]
    
    if outPath == '.':  ###if the output folder is the HOME directory, the path string must be corrected
        outPath = os.path.realpath(outPath)
    
    outOutliersDir =outPath+os.sep+outOutlierDirName
    if not os.path.isdir(outOutliersDir):
        os.makedirs(outOutliersDir)
         
    ######################################################load bold, masks and jacobian arrays ###########################################################
        ##jacOdd and jacEven contain the determinant of the jacobian of each voxel in the bold series after intravolume correction transform
    boldNii,bold = load_nii(boldPath)
    boldFileName = os.path.basename(boldPath)
    _,jacOdd = load_nii(oddJacPath)
    _,jacEven = load_nii(evenJacPath)
    _,uterusMask = load_nii(uterusMaskPath)
    uterusMask = uterusMask.astype(bool)
    
    isBrainMask = False
    isLiverMask = False
    isPlacentaMask = False
    if brainMaskPath.lower() != 'none':
        _,brainMask = load_nii(brainMaskPath)
        brainMask = brainMask.astype(bool)
        brainRange = [float(x) for x in brainRange.split()]
        isBrainMask = True
        
    if liverMaskPath.lower() != 'none':
        _,liverMask = load_nii(liverMaskPath)
        liverMask = liverMask.astype(bool)
        liverRange = [float(x) for x in liverRange.split()]
        isLiverMask = True
        
    if placentaMaskPath.lower() != 'none':
        _,placentaMask = load_nii(placentaMaskPath)
        placentaMask = placentaMask.astype(bool)
        placentaRange = [float(x) for x in placentaRange.split()]
        isPlacentaMask = True

    ################################################### reject first outlier volumes ##########################################################
    begin = time.time()

    logDir = outPath+os.sep+'Logs'
    if not os.path.isdir(logDir):
            os.makedirs(logDir)
    log = open(logDir+os.sep+'log_step3.txt','w')
    log.write('STARTING FIRST OUTLIER REJECTION AND REFERENCE VOLUME COMPUTATION    ')
    log.write('\nRejecting outlier volumes...    ');log.flush()
    
    r,c,p,n = bold.shape
    
    validVolumes = list()
    brainOutliers = list()
    placentaOutliers = list()
    liverOutliers = list()
    uterusOutliers = list()

    for k in range(0,n):
        log.write('\nChecking volume: '+str(k)+'/'+str(n-1));log.flush()
        JO = jacOdd[:,:,:,k]
        JE = jacEven[:,:,:,k]
        isValid = True
        ### if any voxel in any of the jacobians within the uterus mask is negative, reject the corresponding volume in the bold sequence
        JO_masked = JO[uterusMask[:,:,1::2]]
        JE_masked = JE[uterusMask[:,:,0::2]]
        if (JO_masked<0).any() or (JE_masked<0).any():
            log.write('    ...rejected (found negative jacobian value inside uterus mask)');log.flush()
            uterusOutliers.append(k)
            isValid = False

        ##### if any voxel in any of the jacobians within the input brain mask is outside the accepted range, reject the corresponding volume in the bold sequence
        if isBrainMask:
            JO_masked = JO[brainMask[:,:,1::2]]
            if (JO_masked<brainRange[0]).any() or (JO_masked>brainRange[1]).any():
                log.write('    ...rejected (found odd jacobian value outside selected brain range)');log.flush()
                brainOutliers.append(k)
                isValid = False

            JE_masked = JE[brainMask[:,:,0::2]]
            if (JE_masked<brainRange[0]).any() or (JE_masked>brainRange[1]).any():
                log.write('    ...rejected (found even jacobian value outside selected brain range)');log.flush()
                brainOutliers.append(k)
                isValid = False

        ##### if any voxel in any of the jacobians within the input liver mask is outside the accepted range, reject the corresponding volume in the bold sequence
        if isLiverMask:
            JO_masked = JO[liverMask[:,:,1::2]]
            if (JO_masked<liverRange[0]).any() or (JO_masked>liverRange[1]).any():
                log.write('    ...rejected (found odd jacobian value outside selected liver range)');log.flush()
                liverOutliers.append(k)
                isValid = False

            JE_masked = JE[liverMask[:,:,0::2]]
            if (JE_masked<liverRange[0]).any() or (JE_masked>liverRange[1]).any():
                log.write('    ...rejected (found even jacobian value outside selected liver range)');log.flush()
                liverOutliers.append(k)
                isValid = False

        ##### if any voxel in any of the jacobians within the input placenta mask is outside the accepted range, reject the corresponding volume in the bold sequence
        if isPlacentaMask:
            JO_masked = JO[placentaMask[:,:,1::2]]
            if (JO_masked<placentaRange[0]).any() or (JO_masked>placentaRange[1]).any():
                log.write('    ...rejected (found odd jacobian value outside selected placenta range)');log.flush()
                placentaOutliers.append(k)
                isValid = False

            JE_masked = JE[placentaMask[:,:,0::2]]
            if (JE_masked<placentaRange[0]).any() or (JE_masked>placentaRange[1]).any():
                log.write('    ...rejected (found even jacobian value outside selected placenta range)');log.flush()
                placentaOutliers.append(k)
                isValid = False

        ### checks if the current volume is valid
        if isValid:
            validVolumes.append(k)
    
    rejectedVolumes = np.array(uterusOutliers + brainOutliers + liverOutliers + placentaOutliers)
    rejectedVolumes = np.unique(rejectedVolumes)
    log.write('\nDone       Elapsed time: '+str(time.time()-begin)+' s\n')
    log.write('The following volumes were finally rejected: '+str(rejectedVolumes)+'\n\n');log.flush()
    
    ### save the indexes of the outlier volumes in textfiles in the output outliers folder
    with open(outOutliersDir+os.sep+'uterusOutliers_1.txt','w') as f:
        uterusOutliers = np.unique(np.array(uterusOutliers)) 
        for elem in uterusOutliers:
            f.write(str(elem)+' ')
    
    with open(outOutliersDir+os.sep+'brainOutliers_1.txt','w') as f:
        brainOutliers = np.unique(np.array(brainOutliers)) 
        for elem in brainOutliers:
            f.write(str(elem)+' ')

    with open(outOutliersDir+os.sep+'liverOutliers_1.txt','w') as f:
        liverOutliers = np.unique(np.array(liverOutliers))
        for elem in liverOutliers:
            f.write(str(elem)+' ')
    
    with open(outOutliersDir+os.sep+'placentaOutliers_1.txt','w') as f:
        placentaOutliers = np.unique(np.array(placentaOutliers)) 
        for elem in placentaOutliers:
            f.write(str(elem)+' ')

   ######################################## extract the reference volume as the one having the lowest MSE error within the uterus ROI over the valid volumes ################################
    validBold = bold[:,:,:,validVolumes]
    n = len(validVolumes)
    uterusVoxels = np.sum(uterusMask)
    numVoxels = uterusVoxels*n
    
    MSE = np.zeros(n)
    cont = 0

    log.write('Extracting reference volume (with lowest MSE)...   ');log.flush()
    
    begin = time.time()
    
    for i in range(0,n):
        vol1 = validBold[:,:,:,i]
        vol1 = vol1[uterusMask]
        for j in range(0,n):
            vol2 = validBold[:,:,:,j]
            vol2 = vol2[uterusMask]
            MSE[cont] +=  np.sum((vol1-vol2)**2)
        MSE[cont] /= numVoxels
        log.write('\nMSE Vol_'+str(validVolumes[i])+' = '+str(MSE[cont]));log.flush()
        cont += 1

    try:    
        refIdx = np.argmin(MSE)
    except:
        log.write('\nERROR! No reference volume could be selected as all volumes were rejected for the given thresholds and masks\n');log.flush()
        print('\nERROR! No reference volume could be selected as all volumes were rejected for the given thresholds and masks\n')

    refIdx = validVolumes[refIdx]
    log.write('\nVolume '+str(refIdx)+' selected as reference       Elapsed time: '+str(time.time()-begin)+' s\n\n');log.flush()
    
    refVol = bold[:,:,:,refIdx]
    refPath = outPath+os.sep+outRefVolName+'_'+str(refIdx)+'.nii.gz'
    save_nii(refVol,boldNii,refPath)

    totalTime = time.time() - begin
    log.write('\nDONE SUCCESSFULLY!          TOTAL ELAPSED TIME: '+str(totalTime)+' sec')
    log.close()